{"version":3,"sources":["api/BooksAPI.js","components/Book.js","components/Shelf.js","components/Main.js","components/Search.js","components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","updateShelf","e","_this","props","onUpdateShelf","target","value","_this$props","this","image","title","author","react_default","a","createElement","className","style","backgroundImage","height","width","onChange","disabled","React","Component","Shelf","shelfTitle","booksArray","map","components_Book","key","authors","imageLinks","thumbnail","Main","shelves","console","log","components_Shelf","heading","filter","name","Link","to","Search","state","searched","updateQuery","setState","BooksAPI","error","returnedBook","forEach","bookInShelf","_this2","_this$state","type","placeholder","length","App","getAllBooks","Route","exact","path","render","components_Main","_ref","history","components_Search","push","ReactDOM","BrowserRouter","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.306a3038.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\n\nclass Book extends React.Component {\n\n  updateShelf = (e) => {\n    this.props.onUpdateShelf(e.target.value)\n  }\n\n  render() {\n\n    //cleaning up code with destructuring\n    let {image, title, author} = this.props\n\n    return (\n      \n      <li>\n        <div className= 'book'>\n          <div className= 'book-top'>\n            <div className= 'book-cover' \n              style={{\n                backgroundImage: `url(\"${image}\")`,\n                height: 170, //actual image size coming back\n                width: 128\n              }}>\n            </div>\n        <div className= 'book-shelf-changer'>\n          <select onChange= {this.updateShelf} value= {this.props.shelf}>\n            <option value= 'moveTo' disabled> Move to...</option>\n            <option value= 'currentlyReading'>Currently Reading</option>\n            <option value= 'wantToRead'>Want to Read</option>\n            <option value= 'read'>Read</option>\n            <option value= 'none'>None</option>\n          </select>\n        </div>\n          </div>\n          <div className= 'book-title'>{`${title}`}</div>\n          <div className= 'book-authors'>{`${author}`}</div>\n        </div>\n      </li>\n    )\n  }\n}\nexport default Book","import React from 'react';\nimport Book from './Book'\n// import PropTypes from 'prop-types';\n\nclass Shelf extends React.Component {\n\n  //propTypes as used in sample contacts app!\n  // static propTypes = {\n  //   shelfTitle: PropTypes.string.isRequired,\n  //   booksArray: PropTypes.array.isRequired\n  // }\n\n  render(){\n    \n    let shelfTitle = this.props.title;\n    let booksArray = this.props.books;\n\n    return (\n\n      <div className= 'bookshelf'>\n        <h2 className= 'bookshelf-title'>{`${shelfTitle}`}</h2>\n        <div className= 'bookshelf-books'>\n          <ol className= 'books-grid'>\n          {/* books go into shelves*/}\n            {booksArray.map((book) => (\n              <Book\n                id= {book.id}\n                key= {book.id}\n                title= {book.title}\n                author= {book.authors}\n                image= {book.imageLinks ? book.imageLinks.thumbnail: 'placeholder.jpg'}//adding check for empty thumbnail\n                shelf= {book.shelf}\n                onUpdateShelf= {(shelf) => \n                  {this.props.onUpdateShelf(book.id,shelf)}\n                }\n              />\n            ))}\n          </ol>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Shelf","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Shelf from './Shelf'\n\n\nclass Main extends React.Component {\n\n  render(){\n\n    let {shelves, books} = this.props\n\n    //are shelves rendering correctly?\n    console.log('shelves', this.props)\n\n    return (\n\n      <div className= 'list-books'>\n        <div className= 'list-books-title'>\n          <h1>My Reads</h1>\n        </div>\n        <div className= 'list-books-content'>\n          <div>\n            {/* Adding the shelves  */}\n            {shelves.map((shelf)=> (\n              <Shelf\n                key= {shelf.heading}\n                title= {shelf.heading}\n                books= {books.filter((book) =>\n                  book.shelf === shelf.name)} //taken from tutorial contacts app\n                onUpdateShelf= {(id,shelf) => {\n                  this.props.onUpdateShelf(id,shelf)\n                }}\n              />\n            ))\n            }\n          </div>\n        </div>\n        {/*search page using React Router Link component*/}\n        <div className=\"open-search\">\n          <Link to=\"/myreads/search\"> Add a book</Link>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Main","import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport * as BooksAPI from '../api/BooksAPI'\nimport Shelf from '../components/Shelf'\n\nclass Search extends Component {\n\n  state = {\n    query: '',\n    searched: []\n  }\n\n//idea from contacts app\n//todo in future: figure out how to trim 2+ spaces only!\n  updateQuery =(query) => {\n    this.setState({query: query})\n    this.searched(query);}\n\n  //with the query entered\n  searched = (query) => {\n    //check if query exists\n    console.log(query)\n    if(query){\n      //call the search API and use the returned data\n      BooksAPI.search(query).then((searched) => {\n        //if the response doesn't have an error\n        if(!(searched.error)) {\n          console.log(searched)\n      /*iterate thru the response and assign book to 'none' or corresponding shelf */\n          searched =  searched.map((returnedBook) => {\n            returnedBook.shelf = 'none';\n            this.props.books.forEach((bookInShelf) => {\n              if(returnedBook.id === bookInShelf.id) {\n                returnedBook.shelf = bookInShelf.shelf\n              }\n            })\n            return returnedBook\n          })\n            this.setState({searched})\n        } else {\n          this.setState({searched: []})\n        }})\n  } else {\n    this.setState({searched: []})\n  }\n}\n\n  render() {\n\n    const {query, searched} = this.state\n\n    return (\n      <div>\n        <div className='search-books'>\n          <div className='search-books-bar'>\n            <Link className= 'close-search' to= '/myreads/'>Close</Link>\n            <div className= 'search-books-input-wrapper'>\n              <input type= 'text'\n                placeholder= 'Search by title or author'\n                value= {query}\n                onChange= {(e) => \n                  this.updateQuery(e.target.value)\n                }\n              />\n            </div>\n          </div>\n          <div className= 'search-books-results'>\n            <ol className= 'books-grid'>\n              {query !== '' && searched.length > 0 && (\n                <Shelf\n                  title = \"Result\"\n                  books={searched}\n                  onUpdateShelf={(id, shelf) => {\n                    this.props.onUpdateShelf(id, shelf)\n                  }}\n                />\n                )}\n              {query !== '' && searched.length === 0 && (\n                <Shelf\n                  title = \"Books not Found\"\n                  books={[]}\n                />\n              )}\n            </ol>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Search","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport * as BooksAPI from '../api/BooksAPI'\nimport '../css/App.css'\nimport Main from '../components/Main'\nimport Search from '../components/Search'\n\nclass App extends Component {\n  state = {\n    shelves :\n    [{\n      name: 'currentlyReading',\n      heading: 'Currently Reading'\n    },\n    {\n      name: 'wantToRead',\n      heading: 'Want to Read'\n    },\n    {\n      name: 'read',\n      heading: 'Read'\n    },],\n    books: []\n  }\n\n//hook that is run right after the component is added to the DOM\n  componentDidMount(){this.getAllBooks()}\n\n//get all books: BooksAPI getall method\n  getAllBooks = () => {\n    BooksAPI.getAll().then((books) => {\n      this.setState({ books })})\n  }\n\n//using update method from BooksAPI uses book id\n  updateShelf = (id,shelf) => {\n    BooksAPI.update({id}, shelf).then(()=> {\n    this.getAllBooks()\n    });\n    }\n\n//Use og Route and history taken directly from lesson's contact app\n  render() {\n\n    return (\n\n      <div className= 'app'>\n        <Route exact path='/myreads/' render= {() => (\n            <Main\n              books= {this.state.books}\n              shelves= {this.state.shelves}\n              onUpdateShelf= {this.updateShelf}\n            />\n          )}\n        />\n        <Route path= '/myreads/search' render = {({ history }) => (\n            <Search\n              books= {this.state.books}\n              shelves= {this.state.shelves}\n              onUpdateShelf= {(book,shelf) =>{\n                  this.updateShelf(book,shelf)\n                  history.push('/myreads/')\n              }}\n            />\n          )} \n        />\n      </div>\n    )\n  }\n}\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App'\nimport './css/index.css'\n\n/*For React Router to work properly, wraping the\nentire app in a BrowserRouter component*/\nReactDOM.render(\n<BrowserRouter>\n  <App />\n</BrowserRouter>, document.getElementById('root')\n)\n"],"sourceRoot":""}